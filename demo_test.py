"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è BullAware Monitor
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
"""
import requests
import json
from datetime import datetime

BASE_URL = "http://localhost:5001"

def test_enhanced_recommendations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–´–• –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    response = requests.get(f"{BASE_URL}/api/test-enhanced")
    if response.status_code == 200:
        data = response.json()
        test_results = data['test_results']
        
        print(f"üìä –¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {test_results['symbol']}")
        print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${test_results['current_price']:.2f}")
        
        calc = test_results['position_calculation']
        if calc['can_invest']:
            print(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ö–£–ü–ò–¢–¨ {calc['recommended_shares']} –∞–∫—Ü–∏–π")
            print(f"üíµ –°—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: ${calc['investment_amount']:.2f}")
            print(f"üìà Stop-Loss: ${calc['levels']['stop_loss']:.2f}")
            print(f"üìà Take-Profit: ${calc['levels']['take_profit']:.2f}")
            print(f"‚ö†Ô∏è  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫: ${calc['max_risk_amount']:.2f}")
            print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è: {calc['portfolio_percentage']:.1f}%")
        else:
            print(f"‚ùå –ù–µ –º–æ–∂–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å: {calc['reason']}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
    
    print()

def test_user_profile():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("üë§ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–§–ò–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    response = requests.get(f"{BASE_URL}/api/user-profile?user_id=1")
    if response.status_code == 200:
        data = response.json()
        profile = data['profile']
        
        print(f"üí∞ –û–±—â–∏–π –∫–∞–ø–∏—Ç–∞–ª: ${profile['total_capital']:,.2f}")
        print(f"üíµ –î–æ—Å—Ç—É–ø–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${profile['available_capital']:,.2f}")
        print(f"üìä –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${profile['invested_capital']:,.2f}")
        print(f"‚öñÔ∏è  –¢–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫ —Ä–∏—Å–∫—É: {profile['risk_tolerance']}")
        print(f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {profile['max_risk_per_trade']*100:.1f}%")
        print(f"üåç –í–∞–ª—é—Ç–∞: {profile['currency']}")
        
        capacity = profile['investment_capacity']
        print(f"üí° –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: ${capacity['available_amount']:,.2f}")
        print(f"üí° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫: ${capacity['max_risk_amount']:,.2f}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {response.status_code}")
    
    print()

def test_position_calculator():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–π"""
    print("üßÆ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê –ü–û–ó–ò–¶–ò–ô")
    print("=" * 50)
    
    test_data = {
        "user_id": 1,
        "symbol": "TSLA",
        "entry_price": 250.0,
        "confidence": 0.85,
        "strategy_type": "day_trading"
    }
    
    response = requests.post(
        f"{BASE_URL}/api/position-calculator",
        json=test_data,
        headers={"Content-Type": "application/json"}
    )
    
    if response.status_code == 200:
        data = response.json()
        calc = data['calculation']
        
        print(f"üìä –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {test_data['symbol']}")
        print(f"üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${test_data['entry_price']:.2f}")
        print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {test_data['confidence']*100:.0f}%")
        print(f"üìà –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {test_data['strategy_type']}")
        print()
        
        if calc['can_invest']:
            print(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {calc['recommended_shares']} –∞–∫—Ü–∏–π")
            print(f"üíµ –°—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: ${calc['investment_amount']:,.2f}")
            print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è: {calc['portfolio_percentage']:.1f}%")
            print(f"‚ö†Ô∏è  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫: ${calc['max_risk_amount']:,.2f}")
            
            levels = calc['levels']
            print(f"üîª Stop-Loss: ${levels['stop_loss']:.2f} (-{levels['stop_loss_pct']:.1f}%)")
            print(f"üî∫ Take-Profit: ${levels['take_profit']:.2f} (+{levels['take_profit_pct']:.1f}%)")
            print(f"‚öñÔ∏è  Risk/Reward: 1:{levels['risk_reward_ratio']:.1f}")
        else:
            print(f"‚ùå –ù–µ –º–æ–∂–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å: {calc['reason']}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {response.status_code}")
    
    print()

def test_market_data():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üìà –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–´–ù–û–ß–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    symbols = ["AAPL", "MSFT", "GOOGL"]
    
    for symbol in symbols:
        response = requests.get(f"{BASE_URL}/api/market-data/{symbol}")
        if response.status_code == 200:
            data = response.json()
            market = data['market_data']
            
            print(f"üìä {symbol} ({market['company_info']['name']})")
            print(f"üí∞ –¶–µ–Ω–∞: ${market['current_price']:.2f}")
            if market['price_change_pct']:
                change_sign = "üìà" if market['price_change_pct'] > 0 else "üìâ"
                print(f"{change_sign} –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {market['price_change_pct']:+.2f}%")
            print(f"üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {market['volatility']*100:.2f}%")
            if market['support_level'] and market['resistance_level']:
                print(f"üîª –ü–æ–¥–¥–µ—Ä–∂–∫–∞: ${market['support_level']:.2f}")
                print(f"üî∫ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: ${market['resistance_level']:.2f}")
            print()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {symbol}: {response.status_code}")

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é"""
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø BULLAWARE MONITOR")
    print("=" * 60)
    print(f"‚è∞ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    try:
        test_enhanced_recommendations()
        test_user_profile()
        test_position_calculator()
        test_market_data()
        
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

if __name__ == "__main__":
    main()

